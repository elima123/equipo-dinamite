<script>
    function backHome() {
        window.history.back()
    }

    const generalView = document.querySelector(".general-view")
    const riesgosView = document.querySelector(".riesgos-view")
    const analisisView = document.querySelector(".analisis-view")
    const navtab1 = document.querySelector("#navtab-1")
    const navtab2 = document.querySelector("#navtab-2")
    const navtab3 = document.querySelector("#navtab-3")

    function viewInfo() {
        riesgosView.classList.add('hidden')
        analisisView.classList.add('hidden')
        navtab2.classList.remove('active')
        navtab3.classList.remove('active')

        generalView.classList.remove('hidden')
        navtab1.classList.add('active')
    }

    function viewRiesgos() {
        generalView.classList.add('hidden')
        analisisView.classList.add('hidden')
        navtab1.classList.remove('active')
        navtab3.classList.remove('active')

        riesgosView.classList.remove('hidden')
        navtab2.classList.add('active')
    }

    function viewAnalisis() {
        generalView.classList.add('hidden')
        riesgosView.classList.add('hidden')
        navtab1.classList.remove('active')
        navtab2.classList.remove('active')

        analisisView.classList.remove('hidden')
        navtab3.classList.add('active')
    } 

    let proyectoData = JSON.parse('<%- proyectosJSON %>')

    const startDate = new Date(proyectoData.FechaInicio)
    const endDate = new Date(proyectoData.FechaFinal)
    const today = new Date()

    const timeDifference = endDate.getTime() - startDate.getTime()
    const days = Math.floor(timeDifference/(1000*60*60*24))

    const currentDifference = today.getTime() - startDate.getTime()
    const todayDays = Math.floor(currentDifference/(1000*60*60*24))

    const percentage = ((todayDays/days)*100).toFixed(0)

    const progressBar = document.getElementById('prog-bar')
    progressBar.innerHTML = ''
    progressBar.style = 'width: 80%;'

    const progress = document.createElement('div')
    progress.className = 'progress-bar'
    progress.style = `width: ${percentage}%;`

    progressBar.appendChild(progress)

    const rangeDiv = document.getElementById('range-div')
    rangeDiv.innerHTML = ''

    let riesgosData = JSON.parse('<%- riesgosJSON %>')
    let cantCalidad = 0
        let cantTiempo = 0
        let cantRecursos = 0
        let cantAlcance = 0
        let cantCosto = 0
        for (let i = 0; i < riesgosData.length; i++) {
            const categoria = riesgosData[i].Categoria;
            if (categoria === "Calidad") {
                cantCalidad += 1;
            } else if (categoria === "Alcance") {
                cantAlcance += 1;
            } else if (categoria === "Tiempo") {
                cantTiempo += 1;
            } else if (categoria === "Costo") {
                cantCosto += 1;
            } else if (categoria === "Recursos") {
                cantRecursos += 1;
            }
        }

    // Build the chart
    // Pie Chart
    Highcharts.chart('container-2', {
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false,
            type: 'pie'
        },
        title: {
            text: 'Distribución de Tipo de Riesgo',
            align: 'left'
        },
        tooltip: {
            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
        },
        accessibility: {
            point: {
                valueSuffix: '%'
            }
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true
                },
                showInLegend: true
            }
        },
        series: [{
            name: 'Distribución',
            colorByPoint: true,
            data: [{
                name: 'Calidad',
                y: parseFloat(((cantCalidad / riesgosData.length) * 100).toFixed(1))
            }, {
                name: 'Alcance',
                y: parseFloat(((cantAlcance / riesgosData.length) * 100).toFixed(1))
            }, {
                name: 'Tiempo',
                y: parseFloat(((cantTiempo / riesgosData.length) * 100).toFixed(1))
            }, {
                name: 'Recursos',
                y: parseFloat(((cantRecursos / riesgosData.length) * 100).toFixed(1))
            }, {
                name: 'Costo',
                y: parseFloat(((cantCosto / riesgosData.length) * 100).toFixed(1))
            }]
        }]
    })

// Indicador de Viabilidad

Highcharts.chart('container-viable', {
    
    chart: {
        type: 'gauge',
        plotBackgroundColor: null,
        plotBackgroundImage: null,
        plotBorderWidth: 0,
        plotShadow: false,
        height: '80%'
    },
    
    title: {
        text: 'Viabilidad'
    },
    
    pane: {
        startAngle: -90,
        endAngle: 89.9,
        background: null,
        center: ['50%', '75%'],
        size: '110%'
    },
    
    // the value axis
    yAxis: {
        min: 0,
        max: 100,
        tickPixelInterval: 72,
        tickPosition: 'inside',
        tickColor: Highcharts.defaultOptions.chart.backgroundColor || '#FFFFFF',
        tickLength: 20,
        tickWidth: 2,
        minorTickInterval: null,
        labels: {
            distance: 20,
            style: {
                fontSize: '14px'
            }
        },
        lineWidth: 0,
        plotBands: [{
            from: 0,
            to: 50,
            color: '#ff0000',
            thickness: 20,
            borderRadius: '30%'
        }, {
            from: 50,
            to: 65,
            color: '#ffa500', // red
            thickness: 20,
            borderRadius: '30%'
        }, {
            from: 65,
            to: 80,
            color: '#ffff00', // yellow
            thickness: 20,
            borderRadius: '30%'
        }, {
            from: 80,
            to: 95,
            color: '#adff2f',
            thickness: 20,
            borderRadius: '30%'
        }, {
            from: 95,
            to: 100,
            color: '#008000',
            thickness: 20,
            borderRadius: '30%'
        }]
    },
    
    series: [{
        name: 'Viabilidad',
        data: [proyectoData.Viabilidad],
        tooltip: {
            valueSuffix: ' %'
        },
        dataLabels: {
            format: '{y} %',
            borderWidth: 0,
            color: (
                Highcharts.defaultOptions.title &&
                Highcharts.defaultOptions.title.style &&
                Highcharts.defaultOptions.title.style.color
            ) || '#333333',
            style: {
                fontSize: '16px'
            }
        },
        dial: {
            radius: '80%',
            backgroundColor: 'gray',
            baseWidth: 12,
            baseLength: '0%',
            rearLength: '0%'
        },
        pivot: {
            backgroundColor: 'gray',
            radius: 6
        }
    
        }]
    })

    // Grafica de Viabilidad contra el Tiempo

    Highcharts.chart('container', {

    title: {
        text: 'Viabilidad a través del Tiempo',
        align: 'left'
    },
    // subtitle: {
    //     text: 'By Job Category. Source: <a href="https://irecusa.org/programs/solar-jobs-census/" target="_blank">IREC</a>.',
    //     align: 'left'
    // },
    yAxis: {
        title: {
            text: 'Viabilidad (%)'
        }
    },
    xAxis: {
        categories: [
            'January', 'February', 'March', 'April', 'May', 'June'
        ],
        // accessibility: {
        //     rangeDescription: 'Range: January to December'
        // }
    },
    legend: {
        layout: 'vertical',
        align: 'right',
        verticalAlign: 'middle'
    },
    plotOptions: {
        // series: {
        //     label: {
        //         connectorAllowed: false
        //     },
        //     pointStart: 2023
        // }
    },
    series: [{
        name: 'Viabilidad',
        data: [
            74, 82, 93, 81, 67, 71
        ]
    }],
    responsive: {
        rules: [{
            condition: {
                maxWidth: 500
            },
            chartOptions: {
                legend: {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom'
                }
            }
        }]
    }
    })

    // Cerrar Proyecto Popup
    var btnAbrirPopup = document.getElementById('btn-abrir-popup'),
	        overlay = document.getElementById('overlay'),
	        popup = document.getElementById('popup'),
	        btnCerrarPopup = document.getElementById('btn-cerrar-popup'),
            btnPopupSeguridad = document.getElementById('btn-verificacion'),
            popupSeguridad = document.getElementById('popup-2'),
            warningRed = document.getElementById('warning-red'),
            finalSubmit = document.getElementById('cerrar-submit')

        btnAbrirPopup.addEventListener('click', function() {
	        overlay.classList.add('active')
	        popup.classList.add('active')
        })

        btnCerrarPopup.addEventListener('click', function(e){
	        e.preventDefault();
	        overlay.classList.remove('active')
	        popup.classList.remove('active')
            finalSubmit.classList.add('hidden')
            warningRed.classList.add('hidden')
            const checkbox = document.getElementById('are-you-sure')
            checkbox.checked = false
        })

        btnPopupSeguridad.addEventListener('click', function() {
            popupSeguridad.classList.remove('hidden')
            btnPopupSeguridad.classList.add('hidden')
        })

        function verificar() {
            const checkbox = document.getElementById('are-you-sure')
            if (checkbox.checked == true) {
                finalSubmit.classList.remove('hidden')
                warningRed.classList.remove('hidden')
            } else if (checkbox.checked == false) {
                finalSubmit.classList.add('hidden')
                warningRed.classList.add('hidden')
            }
        }

        function cleanTextarea() {
            var textarea = document.getElementById('userInput')

            var cleanedValue = textarea.value.replace(/\s+/g, ' ').trim()

            textarea.value = cleanedValue
        } 

        function formatDate(dateString) {
            const parts = dateString.split('/')
            if (parts.length !== 3) {
                return null 
            }
            const [day, month, year] = parts
            return `${year}-${month}-${day}`
        }

        // Editar Proyecto Popup
        const editPOverlay = document.getElementById('overlay-edit-p')
        const editPPopup = document.getElementById('popup-edit-p')
        const btnEditPAbrir = document.getElementById('btn-abrir-edit-p')
        const btnEditPCerrar = document.getElementById('btn-cerrar-popup-p')

        btnEditPAbrir.addEventListener('click', function() {
            editPOverlay.classList.add('active')
            editPPopup.classList.add('active')

            const dateInicioFormatted = formatDate(proyectoData.start)
            const dateFinalFormatted = formatDate(proyectoData.end)

            const fechasDiv = document.getElementById('fechas-div-pop')
            const fechaI = document.createElement('input')
            fechaI.type = 'date'
            fechaI.name = 'fechaInicio'
            fechaI.id = 'fecha-I'
            fechaI.value = dateInicioFormatted
            const fechaF = document.createElement('input')
            fechaF.type = 'date'
            fechaF.name = 'fechaFinal'
            fechaF.id = 'fecha-F'
            fechaF.value = dateFinalFormatted
            console.log(dateInicioFormatted)
            console.log(dateFinalFormatted)

            fechasDiv.appendChild(fechaI)
            fechasDiv.appendChild(fechaF)
        })

        btnEditPCerrar.addEventListener('click', function() {
            editPOverlay.classList.remove('active')
            editPPopup.classList.remove('active')
            const fechaInicio = document.getElementById('fecha-I')
            const fechaFinal = document.getElementById('fecha-F')

            fechaInicio.remove()
            fechaFinal.remove()
        })

        function popViewInfo() {
            const infoGeneral = document.getElementById('editar-info')
            const infoDes = document.getElementById('editar-desarrolladores')
            const infoAgreg = document.getElementById('agregar-des')
            const a1 = document.getElementById('a-1')
            const a2 = document.getElementById('a-2')
            const a3 = document.getElementById('a-3')

            infoGeneral.classList.remove('hidden')
            infoDes.classList.add('hidden')
            infoAgreg.classList.add('hidden')
            a1.classList.add('active')
            a2.classList.remove('active')
            a3.classList.remove('active')
        }

        function popViewDes() {
            const infoGeneral = document.getElementById('editar-info')
            const infoDes = document.getElementById('editar-desarrolladores')
            const infoAgreg = document.getElementById('agregar-des')
            const a1 = document.getElementById('a-1')
            const a2 = document.getElementById('a-2')
            const a3 = document.getElementById('a-3')

            infoGeneral.classList.add('hidden')
            infoDes.classList.remove('hidden')
            infoAgreg.classList.add('hidden')
            a1.classList.remove('active')
            a2.classList.add('active')
            a3.classList.remove('active')
        }

        function popViewAgreg() {
            const infoGeneral = document.getElementById('editar-info')
            const infoDes = document.getElementById('editar-desarrolladores')
            const infoAgreg = document.getElementById('agregar-des')
            const a1 = document.getElementById('a-1')
            const a2 = document.getElementById('a-2')
            const a3 = document.getElementById('a-3')

            infoGeneral.classList.add('hidden')
            infoDes.classList.add('hidden')
            infoAgreg.classList.remove('hidden')
            a1.classList.remove('active')
            a2.classList.remove('active')
            a3.classList.add('active')
        }

        // Crear Riesgo
        const crearRiesgoOverlay = document.getElementById('overlay-cr')
        const crearRiesgoPopup = document.getElementById('popup-cr')
        const btnCrearRiesgoAbrir = document.getElementById('btn-crearRiesgo')
        const btnCrearRiesgoCerrar = document.getElementById('btn-cerrar-popup-cr')
        
        btnCrearRiesgoAbrir.addEventListener('click', function() {
            crearRiesgoOverlay.classList.add('active')
            crearRiesgoPopup.classList.add('active')
        })

        btnCrearRiesgoCerrar.addEventListener('click', function() {
            crearRiesgoOverlay.classList.remove('active')
            crearRiesgoPopup.classList.remove('active')
        })

    // <!-- IMPLEMENTACIÓN : FUNCIONALIDAD DEL BOTÓN "Editar Riesgos" -->  
        const EditarRiesgosOverlay = document.getElementById('EditarRiesgos')
        const EditarRiesgosPopup = document.getElementById('riesgos-popup')
        const btnEditarRiesgosAbrir = document.getElementById('btn-EditarRiesgos-abrir')
        const btnEditarRiesgosCerrar = document.getElementById("btn-EditarRiesgos-cerrar")

        btnEditarRiesgosAbrir.addEventListener('click', function() {
            EditarRiesgosOverlay.classList.add('active')
            EditarRiesgosPopup.classList.add('active')
        })

        btnEditarRiesgosCerrar.addEventListener('click', function() {
            EditarRiesgosOverlay.classList.remove('active')
            EditarRiesgosPopup.classList.remove('active')
        })
</script>